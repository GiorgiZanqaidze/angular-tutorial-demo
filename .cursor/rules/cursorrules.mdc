# Cursor Rules for Angular Tutorial Demo

## Project Overview
This is an Angular 20.1.0 project with TypeScript. Follow Angular best practices and modern TypeScript conventions.

## Code Style & Formatting
- Use TypeScript strict mode
- Follow Angular Style Guide (https://angular.dev/style-guide)
- Use 2 spaces for indentation
- Use single quotes for strings unless double quotes are needed
- Use trailing commas in objects and arrays
- Use semicolons at the end of statements
- Use camelCase for variables and functions
- Use PascalCase for classes and interfaces
- Use kebab-case for file names and component selectors

## Angular-Specific Rules
- Use standalone components (Angular 17+ feature)
- Prefer reactive forms over template-driven forms
- Use OnPush change detection strategy when possible
- Use trackBy functions in *ngFor loops for performance
- Implement OnInit, OnDestroy interfaces when using lifecycle hooks
- Use async pipe in templates instead of subscribing in components
- Keep components lean - move business logic to services
- Use dependency injection properly
- Follow the single responsibility principle

## TypeScript Best Practices
- Use explicit return types for functions
- Use interfaces for object shapes
- Use enums for constants with multiple values
- Use readonly for immutable properties
- Use optional chaining (?.) and nullish coalescing (??) operators
- Avoid using 'any' type - use proper typing
- Use generics for reusable code
- Use type guards for runtime type checking

## File Organization
- Group related files in feature modules
- Use barrel exports (index.ts) for clean imports
- Keep shared code in a shared module
- Use lazy loading for feature modules
- Follow the folder-by-feature structure

## Component Guidelines
- Keep components focused on presentation
- Use input/output decorators for component communication
- Use ViewChild/ViewChildren for DOM access
- Implement proper error handling
- Use OnPush change detection when components don't need frequent updates

## Service Guidelines
- Make services injectable with providedIn: 'root' when appropriate
- Use RxJS operators effectively (map, filter, switchMap, etc.)
- Handle HTTP errors properly
- Use subjects for component communication when needed
- Keep services stateless when possible

## Testing
- Write unit tests for components and services
- Use TestBed for component testing
- Mock dependencies in tests
- Test user interactions and component outputs
- Maintain good test coverage

## Performance
- Use OnPush change detection strategy
- Implement lazy loading for routes
- Use trackBy functions in *ngFor
- Avoid creating functions in templates
- Use pure pipes when possible
- Optimize bundle size with tree shaking

## Security
- Sanitize user inputs
- Use HTTPS in production
- Implement proper authentication and authorization
- Avoid direct DOM manipulation
- Use Angular's built-in XSS protection

## Future Monorepo Considerations
- Structure code to be easily extractable to a monorepo
- Keep clear boundaries between modules
- Use shared libraries pattern
- Prepare for NestJS backend integration
- Consider using Nx or similar tools for monorepo management

## General Guidelines
- Write clean, readable, and maintainable code
- Use descriptive variable and function names
- Add comments for complex business logic
- Keep functions small and focused
- Use early returns to reduce nesting
- Handle edge cases and errors gracefully
- Follow SOLID principles
- Use consistent naming conventions throughout the project

## Dependencies
- Prefer Angular built-in solutions over third-party libraries
- Keep dependencies up to date
- Use only necessary dependencies
- Consider bundle size impact when adding new dependencies

## Documentation
- Document complex functions and classes
- Keep README updated
- Document API endpoints and data models
- Add inline comments for business logic
